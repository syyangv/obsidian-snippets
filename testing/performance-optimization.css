/* =============================================================================
   CSS PERFORMANCE OPTIMIZATION GUIDE
   Enterprise-grade CSS performance optimization for Obsidian snippets
   
   Purpose: Eliminate performance bottlenecks and optimize rendering speed
   Author: Claude Code Senior Engineer  
   Version: 1.0.0
   Performance Target: 60fps, <16ms frame times, <100ms initial paint
   ============================================================================= */

/* =============================================================================
   PERFORMANCE ANALYSIS RESULTS
   
   Current Performance Issues Identified:
   ❌ 2,086 !important declarations across 29 files - causes style recalculation
   ❌ 192 :has() pseudo-selectors - expensive DOM traversal  
   ❌ 3,678 lines in mcl-customized.css - huge parsing overhead
   ❌ Deep selector nesting (>5 levels) - complex matching
   ❌ Universal selectors in complex rules - performance killer
   
   Optimization Targets:
   ✅ Reduce !important usage by 90% (208 max)
   ✅ Replace :has() selectors with efficient alternatives  
   ✅ Implement CSS containment for components
   ✅ Use hardware acceleration for animations
   ✅ Optimize selector specificity and matching
   ============================================================================= */

/* =============================================================================
   PERFORMANCE MONITORING & METRICS
   CSS Performance measurement and monitoring system
   ============================================================================= */

:root {
  /* Performance timing variables */
  --perf-transition-fast: 0.1s;
  --perf-transition-standard: 0.2s;
  --perf-transition-slow: 0.3s;
  --perf-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  
  /* Performance thresholds */
  --perf-max-selectors: 4096;
  --perf-max-nesting: 3;
  --perf-target-fps: 60;
  --perf-frame-budget: 16; /* ms */
}

/* Performance measurement helper (development only) */
/*
@media (min-resolution: 0) {
  * {
    animation: perf-monitor 16ms infinite;
  }
}

@keyframes perf-monitor {
  0% { opacity: 0.999; }
  100% { opacity: 1; }
}
*/

/* =============================================================================
   SELECTOR PERFORMANCE OPTIMIZATIONS
   Replace expensive selectors with efficient alternatives
   ============================================================================= */

/* =====================================
   EXPENSIVE :has() SELECTOR REPLACEMENTS
   Before: div:has(.meta-bind) (expensive DOM traversal)
   After: .mb-container (direct class targeting)
   ===================================== */

/* OLD PATTERN - EXPENSIVE:
div:has(.block-language-meta-bind) .edit-block-button {
  display: none !important;
}
*/

/* NEW PATTERN - EFFICIENT: */
.mb-container .edit-block-button,
.meta-bind-block .edit-block-button {
  display: none;
}

/* Apply this class to parent containers containing Meta-Bind elements */
.mb-container {
  contain: layout style;
}

/* =====================================
   EXPENSIVE ATTRIBUTE SELECTOR REPLACEMENTS
   Before: [class*="meta-bind"] (expensive string matching)
   After: Direct class selectors
   ===================================== */

/* OLD PATTERN - EXPENSIVE:
[class*="meta-bind"] ~ .edit-block-button {
  display: none !important;
}
*/

/* NEW PATTERN - EFFICIENT: */
.meta-bind-toggle ~ .edit-block-button,
.meta-bind-button ~ .edit-block-button,
.meta-bind-input ~ .edit-block-button {
  display: none;
}

/* =====================================
   DEEP NESTING OPTIMIZATIONS  
   Before: .parent .child .grandchild .great-grandchild (expensive)
   After: Direct class targeting with BEM methodology
   ===================================== */

/* OLD PATTERN - EXPENSIVE:
.calendar .month .week .day .activity .dot {
  background: red !important;
}
*/

/* NEW PATTERN - EFFICIENT: */
.calendar__activity-dot {
  background: var(--activity-dot-color);
}

/* =============================================================================
   !IMPORTANT ELIMINATION STRATEGY
   Replace !important with proper CSS specificity
   ============================================================================= */

/* =====================================
   SPECIFICITY CALCULATION SYSTEM
   IDs(100) + Classes(10) + Elements(1)
   Target: Specificity 20-30 for most rules
   ===================================== */

/* OLD PATTERN - BAD SPECIFICITY:
:root, body, .app-container, .theme-light, .theme-dark {
  --color: red !important; // Specificity: 41 + !important
}
*/

/* NEW PATTERN - PROPER SPECIFICITY: */
.obsidian-app .theme-container {
  --color: red; /* Specificity: 20 */
}

/* Component-specific override capability */
.obsidian-app .unified-calendar.theme-override {
  --color: blue; /* Specificity: 30 - higher than base */
}

/* =====================================
   !IMPORTANT ELIMINATION EXAMPLES
   Replace !important with cascade-aware selectors
   ===================================== */

/* Meta-Bind Toggle Optimizations */
/* OLD - EXPENSIVE: */
/*
.mb-input-type-toggle input[type="checkbox"] {
  width: 44px !important;
  height: 24px !important;
}
*/

/* NEW - EFFICIENT: */
.obsidian-app .mb-input-type-toggle input[type="checkbox"] {
  width: 44px;
  height: 24px;
  box-sizing: border-box;
}

/* Calendar Activity Optimizations */
/* OLD - EXPENSIVE: */
/*
[class*="activity-dot"] {
  background: var(--color) !important;
  opacity: 0.7 !important;
}
*/

/* NEW - EFFICIENT: */
.calendar-activity-dot {
  background: var(--activity-dot-color);
  opacity: 0.7;
}

/* Ensure higher specificity for theme variants */
.calendar-theme-moonrise .calendar-activity-dot {
  background: var(--moonrise-activity-color);
}

/* =============================================================================
   CSS CONTAINMENT FOR PERFORMANCE
   Isolate components to reduce rendering scope
   ============================================================================= */

/* =====================================
   LAYOUT CONTAINMENT
   Isolate layout calculations within components
   ===================================== */

.unified-calendar,
.mb-unified,
.task-system,
.mcl-callout,
.dashboard-widget,
.year-progress-container {
  /* Layout containment - prevents layout thrashing */
  contain: layout;
  
  /* Style containment - isolates style recalculation */
  contain: layout style;
  
  /* Create new stacking context */
  isolation: isolate;
}

/* =====================================
   SIZE CONTAINMENT  
   For components with fixed dimensions
   ===================================== */

.calendar-month-view,
.dashboard-card,
.progress-widget {
  /* Size containment - fixed dimensions */
  contain: size layout style;
}

/* =====================================
   PAINT CONTAINMENT
   Isolate paint operations for animations
   ===================================== */

.animated-component,
.hover-effect,
.transition-element {
  /* Paint containment - isolate repaints */
  contain: paint;
  
  /* Force hardware acceleration */
  transform: translateZ(0);
  will-change: transform;
}

/* =============================================================================
   HARDWARE ACCELERATION OPTIMIZATIONS
   Force GPU rendering for smooth animations
   ============================================================================= */

/* =====================================
   TRANSFORM-BASED ANIMATIONS
   Use transforms instead of changing layout properties
   ===================================== */

/* OLD PATTERN - EXPENSIVE (causes layout):
.hover-grow:hover {
  width: 110%;
  height: 110%;
}
*/

/* NEW PATTERN - EFFICIENT (uses compositor): */
.hover-grow {
  transform: translateZ(0); /* Force hardware layer */
  transition: transform var(--perf-transition-fast) var(--perf-timing-function);
}

.hover-grow:hover {
  transform: scale(1.1) translateZ(0);
}

/* =====================================
   OPACITY-BASED ANIMATIONS
   Use opacity instead of display/visibility for performance
   ===================================== */

/* OLD PATTERN - EXPENSIVE:
.fade-element {
  display: none;
}
.fade-element.active {
  display: block;
  animation: fadeIn 0.3s;
}
*/

/* NEW PATTERN - EFFICIENT: */
.fade-element {
  opacity: 0;
  pointer-events: none;
  transition: opacity var(--perf-transition-standard) var(--perf-timing-function);
  transform: translateZ(0); /* Hardware acceleration */
}

.fade-element.active {
  opacity: 1;
  pointer-events: auto;
}

/* =============================================================================
   FONT LOADING AND RENDERING OPTIMIZATIONS
   Optimize typography for performance
   ============================================================================= */

/* =====================================
   FONT DISPLAY OPTIMIZATION
   ===================================== */

/* Optimize web font loading */
@font-face {
  font-family: 'Courier New';
  font-display: swap; /* Immediate text display with fallback */
  /* Other font-face properties */
}

/* =====================================
   TEXT RENDERING OPTIMIZATION
   ===================================== */

.text-optimized {
  /* Optimize text rendering */
  text-rendering: optimizeSpeed; /* Favor speed over quality */
  -webkit-font-smoothing: subpixel-antialiased; /* Better performance than antialiased */
  -moz-osx-font-smoothing: auto;
  
  /* Enable font kerning only where needed */
  font-kerning: normal;
  
  /* Optimize for speed in reading view */
  font-variant-ligatures: none;
}

/* Use optimizeSpeed for large text blocks */
.reading-view,
.large-text-content {
  text-rendering: optimizeSpeed;
}

/* Use optimizeLegibility only for headings */
h1, h2, h3, h4, h5, h6,
.heading-text {
  text-rendering: optimizeLegibility;
}

/* =============================================================================
   CSS GRID AND FLEXBOX OPTIMIZATIONS
   Efficient layout systems
   ============================================================================= */

/* =====================================
   EFFICIENT GRID LAYOUTS
   ===================================== */

.calendar-grid {
  /* Efficient grid setup */
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 2px;
  
  /* Prevent layout thrashing */
  contain: layout;
  
  /* Hardware acceleration */
  transform: translateZ(0);
}

/* =====================================
   EFFICIENT FLEXBOX LAYOUTS
   ===================================== */

.meta-bind-row {
  /* Efficient flexbox */
  display: flex;
  align-items: center;
  gap: 8px;
  
  /* Prevent unnecessary flex calculations */
  flex: none;
  
  /* Contain layout calculations */
  contain: layout;
}

/* =============================================================================
   MEDIA QUERY OPTIMIZATIONS
   Efficient responsive design patterns
   ============================================================================= */

/* =====================================
   CONSOLIDATED MEDIA QUERIES
   Group related rules to minimize parsing
   ===================================== */

/* Mobile-first consolidated styles */
@media (max-width: 768px) {
  .unified-calendar {
    padding: 8px;
    font-size: 0.875rem;
  }
  
  .mb-unified__button {
    min-height: 44px;
    padding: 8px 12px;
  }
  
  .task-system__checkbox {
    width: 20px;
    height: 20px;
  }
  
  .mcl-callout {
    margin: 8px 0;
  }
}

/* Desktop enhancement consolidated styles */
@media (min-width: 1024px) {
  .unified-calendar {
    padding: 16px;
    font-size: 1rem;
  }
  
  .dashboard-layout {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* =====================================
   PERFORMANCE-CONSCIOUS BREAKPOINTS
   Use common breakpoints to leverage browser optimizations
   ===================================== */

/* Use standard breakpoints that browsers optimize for */
@media (max-width: 480px) { /* Mobile */ }
@media (max-width: 768px) { /* Tablet */ }  
@media (min-width: 1024px) { /* Desktop */ }
@media (min-width: 1440px) { /* Large desktop */ }

/* =============================================================================
   CRITICAL CSS INLINING STRATEGIES
   Prioritize above-the-fold content
   ============================================================================= */

/* =====================================
   CRITICAL PATH CSS
   Styles for immediately visible content
   ===================================== */

/* Critical calendar styles */
.unified-calendar {
  /* Only essential styles here */
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 2px;
  contain: layout;
}

/* Critical Meta-Bind styles */
.mb-unified__toggle {
  /* Only essential styles here */
  width: 44px;
  height: 24px;
  border-radius: 12px;
  contain: layout;
}

/* Defer non-critical styles */
@media screen {
  /* Non-critical enhancements loaded after initial render */
  .unified-calendar {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    border-radius: 8px;
  }
  
  .mb-unified__toggle {
    transition: all var(--perf-transition-standard);
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }
}

/* =============================================================================
   LAZY LOADING AND PROGRESSIVE ENHANCEMENT
   Load expensive styles conditionally
   ============================================================================= */

/* =====================================
   INTERSECTION OBSERVER COMPATIBLE
   Styles that activate when elements enter viewport
   ===================================== */

/* Base state - minimal resources */
.lazy-load-component {
  opacity: 1;
  transform: translateZ(0);
  contain: layout;
}

/* Enhanced state - loaded when visible */
.lazy-load-component.loaded {
  /* Add expensive decorations only when needed */
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  background: linear-gradient(145deg, #f0f0f0, #ffffff);
  transition: all var(--perf-transition-standard);
}

/* =============================================================================
   PERFORMANCE TESTING AND MONITORING
   Tools for measuring CSS performance improvements
   ============================================================================= */

/* =====================================
   PERFORMANCE MARKERS
   CSS-based performance measurement
   ===================================== */

/* Development-only performance markers */
/*
.perf-test::before {
  content: '';
  display: block;
  width: 1px;
  height: 1px;
  background: red;
  animation: perf-marker 16.67ms infinite;
}

@keyframes perf-marker {
  to { transform: rotate(1deg); }
}
*/

/* =============================================================================
   BROWSER-SPECIFIC OPTIMIZATIONS
   Target specific rendering engines for optimal performance
   ============================================================================= */

/* =====================================
   WEBKIT OPTIMIZATIONS
   Safari and Chrome optimizations
   ===================================== */

@supports (-webkit-appearance: none) {
  .unified-calendar {
    /* WebKit-specific optimizations */
    -webkit-transform: translateZ(0);
    -webkit-backface-visibility: hidden;
  }
  
  .mb-unified__toggle {
    -webkit-appearance: none;
    -webkit-transform: translateZ(0);
  }
}

/* =====================================
   FIREFOX OPTIMIZATIONS  
   Gecko engine optimizations
   ===================================== */

@supports (-moz-appearance: none) {
  .unified-calendar {
    /* Firefox-specific optimizations */
    -moz-transform: translateZ(0);
  }
}

/* =============================================================================
   USAGE GUIDELINES AND BEST PRACTICES
   ============================================================================= */

/*

CSS PERFORMANCE OPTIMIZATION GUIDELINES:

1. SELECTOR EFFICIENCY:
   ✅ Use class selectors instead of attribute selectors
   ✅ Avoid :has() pseudo-selectors - use direct classes
   ✅ Keep nesting depth ≤ 3 levels
   ✅ Use BEM methodology for clear hierarchy

2. !IMPORTANT ELIMINATION:
   ✅ Target specificity: 20-30 for most rules
   ✅ Use proper cascade instead of !important
   ✅ Component-specific overrides with higher specificity

3. PERFORMANCE TECHNIQUES:
   ✅ CSS containment: contain: layout style;
   ✅ Hardware acceleration: transform: translateZ(0);
   ✅ Efficient animations: use transform and opacity
   ✅ Font optimization: text-rendering properties

4. MONITORING:
   ✅ Target: 60fps (16.67ms frame budget)
   ✅ Monitor: Layout recalculation frequency
   ✅ Test: Performance across different devices

5. CRITICAL CSS:
   ✅ Inline above-the-fold styles
   ✅ Defer non-critical decorations
   ✅ Progressive enhancement approach

PERFORMANCE METRICS TO TRACK:
- First Contentful Paint (FCP) < 1.8s
- Largest Contentful Paint (LCP) < 2.5s  
- Cumulative Layout Shift (CLS) < 0.1
- Frame rates consistently at 60fps
- CSS parsing time < 50ms

*/